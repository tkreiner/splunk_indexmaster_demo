##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##

[meraki:accesspoints]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"occurredAt\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

FIELDALIAS-meraki_event_type = type AS meraki_event_type

EVAL-app = if(meraki_event_type IN("bcast_deauth_attack", "mac_spoofing_attack", "8021x_eap_success", "8021x_eap_failure", "8021x_auth", "splash_auth", "wpa_auth"), "Cisco Meraki", NULL)
EVAL-description = if(meraki_event_type IN("bcast_deauth_attack", "mac_spoofing_attack"), description, NULL)
EVAL-dest = case(meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event", "wpa_deauth", "bcast_deauth_attack", "mac_spoofing_attack"), if(deviceName="", deviceSerial, deviceName))
EVAL-dvc = case(meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event", "wpa_deauth"), if(deviceName="", deviceSerial, deviceName))
EVAL-object_id = if(meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event"), deviceSerial, NULL)
EVAL-severity = if(meraki_event_type IN("bcast_deauth_attack", "mac_spoofing_attack"), "unknown", NULL)
EVAL-src = case(meraki_event_type IN("bcast_deauth_attack", "mac_spoofing_attack"), lower('eventData.src'), meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event", "wpa_deauth"), if(deviceName="", deviceSerial, deviceName), meraki_event_type IN("wpa_auth", "splash_auth", "8021x_auth", "8021x_eap_success", "8021x_eap_failure"), clientDescription)
EVAL-src_ip = case(meraki_event_type="8021x_auth", 'eventData.last_known_client_ip', meraki_event_type IN("8021x_eap_success", "8021x_eap_failure"), 'eventData.client_ip')
EVAL-src_mac = if(meraki_event_type IN("8021x_auth", "8021x_eap_success", "8021x_eap_failure"), lower('eventData.client_mac'), NULL)
EVAL-status = if(meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event", "wpa_deauth"), "success", NULL)
EVAL-type = if(meraki_event_type IN("bcast_deauth_attack", "mac_spoofing_attack"), "warning", NULL)
EVAL-user = case(meraki_event_type IN("wpa_auth", "wpa_deauth", "splash_auth"), clientDescription, meraki_event_type IN("8021x_auth", "8021x_eap_success", "8021x_eap_failure"), 'eventData.identity')
EVAL-vendor_product = if(meraki_event_type IN("auto_rf_channel_change", "auto_tx_power_change", "dfs_event", "wpa_deauth"), "Cisco Meraki", NULL)

LOOKUP-meraki_accesspoints_action_type = cisco_meraki_accesspoints_action_lookup meraki_event_type OUTPUTNEW action
LOOKUP-meraki_accesspoints_change_type_object_object_category_result_type = cisco_meraki_accesspoints_change_type_object_object_category_result_lookup meraki_event_type OUTPUTNEW change_type, object, object_category, result
LOOKUP-meraki_accesspoints_object_attrs_type = cisco_meraki_accesspoints_object_attrs_lookup meraki_event_type OUTPUTNEW object_attrs

[meraki:securityappliances]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"occurredAt\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

FIELDALIAS-meraki_event_type = type AS meraki_event_type

EVAL-action = case(meraki_event_type="vpn_registry_change", if('eventData.connectivity'="true", "started", "stopped"))
EVAL-app = if(meraki_event_type IN("dhcp_problem", "dhcp_blocked", "martian_vlan", "cf_block", "events_dropped2", "splash_auth"), "Cisco Meraki", NULL)
EVAL-change_type = case(meraki_event_type="vpn_registry_change", if('eventData.connectivity'="true", "start", "stop"))
EVAL-description = case(meraki_event_type="dhcp_problem", printf("\"extra\":\"%s\",\"vap\":\"%s\",\"vlan\":\"%s\"", 'eventData.extra', 'eventData.vap', 'eventData.vlan'), meraki_event_type="events_dropped2", printf("\"n\":\"%s\",\"type\":\"%s\"", 'eventData.n', 'eventData.type'), meraki_event_type="martian_vlan", printf("\"all_total_illegal_packets\":\"%s\",\"client_total_illegal_packets\":\"%s\",\"last_illegal_ip_mapped_vlan_id\":\"%s\",\"last_reported_total\":\"%s\",\"source_client_assigned_vlan\":\"%s\",\"source_client_ip\":\"%s\",\"source_client_mac\":\"%s\"", 'eventData.all_total_illegal_packets', 'eventData.client_total_illegal_packets', 'eventData.last_illegal_ip_mapped_vlan_id', 'eventData.last_reported_total', 'eventData.source_client_assigned_vlan', 'eventData.source_client_ip', 'eventData.source_client_mac'), meraki_event_type="cf_block", printf("\"category\":\"%s\",\"server\":\"%s\",\"url\":\"%s\"", 'eventData.category', 'eventData.server', 'eventData.url'))
EVAL-dest = case(meraki_event_type IN("dhcp_problem", "dhcp_blocked", "ids_start", "ids_update", "martian_vlan", "web_cache_started", "web_cache_stopped", "vpn_registry_change", "events_dropped2"), if(deviceName="", deviceSerial, deviceName), meraki_event_type="cf_block", clientId)
EVAL-dest_ip = if(meraki_event_type="dhcp_lease", lower('eventData.server_ip'), NULL)
EVAL-dest_mac = if(meraki_event_type="dhcp_lease", lower('eventData.server_mac'), NULL)
EVAL-duration = if(meraki_event_type="dhcp_lease", 'eventData.duration', NULL)
EVAL-dvc = case(meraki_event_type IN("ids_start", "ids_update", "web_cache_started", "web_cache_stopped", "vpn_registry_change"), if(deviceName="", deviceSerial, deviceName))
EVAL-lease_duration = if(meraki_event_type="dhcp_lease", 'eventData.duration', NULL)
EVAL-lease_scope = if(meraki_event_type="dhcp_lease", 'eventData.subnet', NULL)
EVAL-object_attrs = case(meraki_event_type IN("ids_start", "ids_update"), "intrusion_detection_rules", meraki_event_type="web_cache_started", 'eventData.cache_size_mb')
EVAL-object_id = if(meraki_event_type IN("ids_start", "ids_update"), 'eventData.rules', NULL)
EVAL-result = case(meraki_event_type="vpn_registry_change", if('eventData.connectivity'="true", "started", "stopped"))
EVAL-severity = if(meraki_event_type="martian_vlan", "unknown", NULL)
EVAL-signature = if(meraki_event_type IN("dhcp_lease", "dhcp_problem", "dhcp_blocked", "martian_vlan", "cf_block", "events_dropped2"), description, NULL)
EVAL-signature_id = if(meraki_event_type="cf_block", 'eventData.category', NULL)
EVAL-src = case(meraki_event_type="dhcp_problem", 'eventData.vlan', meraki_event_type="dhcp_blocked", lower('eventData.mac'), meraki_event_type IN("ids_start", "ids_update", "web_cache_started", "web_cache_stopped", "vpn_registry_change", "cf_block", "events_dropped2"), if(deviceName="", deviceSerial, deviceName), meraki_event_type="martian_vlan", 'eventData.source_client_ip', meraki_event_type="splash_auth", clientDescription)
EVAL-src_ip = if(meraki_event_type="dhcp_lease", 'eventData.ip', NULL)
EVAL-status = if(meraki_event_type IN("ids_start", "ids_update", "web_cache_started", "web_cache_stopped", "vpn_registry_change"), "success", NULL)
EVAL-type = case(meraki_event_type IN("dhcp_problem", "dhcp_blocked", "martian_vlan"), "warning", meraki_event_type IN("cf_block", "events_dropped2"), "alert")
EVAL-user = case(meraki_event_type="splash_auth", clientDescription)
EVAL-vendor_product = if(meraki_event_type IN("dhcp_lease", "ids_start", "ids_update", "web_cache_started", "web_cache_stopped", "vpn_registry_change"), "Cisco Meraki", NULL)

LOOKUP-meraki_securityappliances_action_type = cisco_meraki_securityappliances_action_lookup meraki_event_type OUTPUTNEW action
LOOKUP-meraki_securityappliances_change_type_result_type = cisco_meraki_securityappliances_change_type_result_lookup meraki_event_type OUTPUTNEW change_type, result
LOOKUP-meraki_securityappliances_object_object_category_type = cisco_meraki_securityappliances_object_object_category_lookup meraki_event_type OUTPUTNEW object, object_category

[meraki:switches]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"occurredAt\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

FIELDALIAS-meraki_event_type = type AS meraki_event_type

EVAL-action = case(meraki_event_type="stp_port_role_change" AND 'eventData.new_state'!="designated", "stopped", meraki_event_type="stp_port_role_change" AND 'eventData.new_state'="designated", "started")
EVAL-dest = case(meraki_event_type IN("port_status", "stp_port_role_change", "port_bounce", "poe_budget_change", "psu_insert"), if(deviceName="", deviceSerial, deviceName))
EVAL-dvc = case(meraki_event_type IN("port_status", "stp_port_role_change", "port_bounce", "poe_budget_change", "psu_insert"), if(deviceName="", deviceSerial, deviceName))
EVAL-object_attrs = case(meraki_event_type="port_status", 'eventData.new', meraki_event_type="stp_port_role_change", 'eventData.new_state', meraki_event_type="port_bounce", "bounce")
EVAL-object_category = if(meraki_event_type IN("port_status", "stp_port_role_change", "port_bounce", "poe_budget_change", "psu_insert"), "switch", NULL)
EVAL-object_id = case(meraki_event_type="port_status", 'eventData.port', meraki_event_type="stp_port_role_change", 'eventData.port', meraki_event_type="port_bounce", 'eventData.ports', meraki_event_type="psu_insert", 'eventData.slot')
EVAL-result = case(meraki_event_type="port_status", 'eventData.new', meraki_event_type="stp_port_role_change" AND 'eventData.new_state'!="designated", "stopped", meraki_event_type="stp_port_role_change" AND 'eventData.new_state'="designated", "started")
EVAL-src = case(meraki_event_type IN("port_status", "stp_port_role_change", "port_bounce", "poe_budget_change", "psu_insert"), if(deviceName="", deviceSerial, deviceName))
EVAL-status = case(meraki_event_type="port_status", "success", meraki_event_type="stp_port_role_change", 'eventData.new_state', meraki_event_type="port_bounce", "bounce", meraki_event_type="psu_insert", "success", meraki_event_type="poe_budget_change", "success")
EVAL-vendor_product = if(meraki_event_type IN("port_status", "stp_port_role_change", "port_bounce", "poe_budget_change", "psu_insert"), "Cisco Meraki", NULL)

LOOKUP-meraki_switches_action_type = cisco_meraki_switches_action_lookup meraki_event_type OUTPUTNEW action
LOOKUP-meraki_switches_change_type_object_type = cisco_meraki_switches_change_type_object_lookup meraki_event_type OUTPUTNEW change_type, object
LOOKUP-meraki_switches_result_type = cisco_meraki_switches_result_lookup meraki_event_type OUTPUTNEW result

[meraki:cameras]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"occurredAt\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

FIELDALIAS-meraki_event_type = type AS meraki_event_type

EVAL-action = if(meraki_event_type="night_mode", case('eventData.new_state'="on", "started", 'eventData.new_state'="off", "stopped"), NULL)
EVAL-change_type = if(meraki_event_type="night_mode", "system configuration", NULL)
EVAL-dest = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), if(deviceName="", deviceSerial, deviceName), NULL)
EVAL-dvc = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), if(deviceName="", deviceSerial, deviceName), NULL)
EVAL-object = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), "camera", NULL)
EVAL-object_attrs = case(meraki_event_type="night_mode", printf("\"lux\":\"%s\",\"new_state\":\"%s\"", 'eventData.lux', 'eventData.new_state'), meraki_event_type IN("motion_alert_schedule_applied", "motion_alert_schedule_removed", "schedule_applied", "schedule_edited"), "schedule", meraki_event_type="update_user_settings", "motion_based_retention")
EVAL-object_category = if(meraki_event_type="night_mode", "night_mode", NULL)
EVAL-result = if(meraki_event_type="night_mode", case('eventData.new_state'="on", "started", 'eventData.new_state'="off", "stopped"), NULL)
EVAL-src = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), if(deviceName="", deviceSerial, deviceName), NULL)
EVAL-status = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), "success", NULL)
EVAL-user = if(meraki_event_type IN("update_user_settings", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "schedule_applied", "schedule_edited"), 'eventData.user', NULL)
EVAL-vendor_product = if(meraki_event_type IN("update_user_settings", "night_mode", "motion_alert_schedule_applied", "motion_alert_schedule_removed", "video_export_delete", "schedule_applied", "schedule_edited"), "Cisco Meraki", NULL)

LOOKUP-meraki_camera_type = cisco_meraki_cameras_lookup meraki_event_type OUTPUTNEW action, change_type, object_category, result

[meraki:organizationsecurity]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"ts\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

EVAL-action = case(eventType="IDS Alert" AND blocked="true", "blocked", eventType="IDS Alert" AND blocked="false", "allowed", eventType="File Scanned", lower('action'))
EVAL-bytes_in = if(eventType="File Scanned", fileSizeBytes, NULL)
EVAL-category = case(eventType="IDS Alert", 'message', eventType="File Scanned", 'fileType')
EVAL-date = substr(ts, 1, 10)
EVAL-dest = case(eventType="IDS Alert", mvindex(split(destIp, ":"), 0), eventType="File Scanned", clientName)
EVAL-dest_ip = case(eventType="IDS Alert", mvindex(split(destIp, ":"), 0), eventType="File Scanned", srcIp)
EVAL-file_hash = if(eventType="File Scanned", fileHash, NULL)
EVAL-file_name = if(eventType="File Scanned", mvindex(split(mvindex(split(uri, "/"), -1), "?"), 0), NULL)
EVAL-file_path = if(eventType="File Scanned", uri, NULL)
EVAL-severity = "high"
EVAL-signature = case(eventType="File Scanned", 'canonicalName')
EVAL-signature_id = case(eventType="IDS Alert", 'signature')
EVAL-src = case(eventType="IDS Alert", mvindex(split(srcIp, ":"), 0))
EVAL-src_ip = case(eventType="IDS Alert", mvindex(split(srcIp, ":"), 0))
EVAL-user = case(eventType="File Scanned", clientName)
EVAL-vendor_product = "Cisco Meraki"

LOOKUP-meraki_organizationsecurity_priority = cisco_meraki_organizationsecurity_lookup priority OUTPUTNEW severity

[meraki:audit]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"ts\"\s*:\s*
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%fZ

FIELDALIAS-dest = networkId AS dest
FIELDALIAS-object = networkName AS object
FIELDALIAS-object_attrs = label AS object_attrs
FIELDALIAS-vendor_account = adminEmail AS vendor_account

EVAL-action = "modified"
EVAL-user = mvindex(split(adminEmail, "@"), 0)
EVAL-change_type = "system configuration"
EVAL-object_category = "system configuration"
EVAL-result = "\""+label+"\""+",\"Old value\":"+"\""+oldValue+"\""+",\"New value\":"+"\""+newValue+"\""
EVAL-status = "success"
EVAL-vendor_product = "Cisco Meraki"

[meraki:airmarshal]
SHOULD_LINEMERGE = false
KV_MODE = JSON
TIME_PREFIX = \"lastSeen\"\s*:\s*
TIME_FORMAT = %s
EVAL-vendor_product = "Cisco Meraki"
